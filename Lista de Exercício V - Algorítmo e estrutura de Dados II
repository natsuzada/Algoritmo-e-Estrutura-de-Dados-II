Códigos da atividade V de Algoritmo e Estrutura de Dados II

QUESTÃO 1:

#include <stdio.h>
#include <stdlib.h>
#include <ctime>

float calcularMedia(int numeros[], int tamanho) {
  int soma = 0;

  for (int i = 0; i < tamanho; i++) {
    soma += numeros[i];
  }

  float media = (float) soma / tamanho;
  return media;
}

int main() {
  int tamanho;

  printf("Informe o tamanho do array: ");
  scanf("%d", &tamanho);

  int numeros[tamanho];
  srand(time(NULL));

  for (int i = 0; i < tamanho; i++) {
    numeros[i] = rand() % 100;
  }

  printf("\nElementos do array:\n");
  for (int i = 0; i < tamanho; i++) {
    printf("%d ", numeros[i]);
  }

  float media = calcularMedia(numeros, tamanho);
  printf("\n\nMedia: %.2f", media);

  return 0;
}

QUESTÃO 2:

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int contarConsoantes(char str[]) {
  int contagemConsoantes = 0;
  int tamanho = strlen(str);

  for (int i = 0; i < tamanho; i++) {
    char ch = str[i];
    ch = tolower(ch);

    if ((ch >= 'a' && ch <= 'z') && (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u')) {
      contagemConsoantes++;
    }
  }

  return contagemConsoantes;
}

int main() {
  char str[100];

  printf("Digite uma string: ");
  fgets(str, sizeof(str), stdin); 

  int consoantes = contarConsoantes(str);
  printf("Numero de consoantes: %d\n", consoantes);

  return 0;
}

QUESTÃO 3:

#include <stdio.h>

bool ehPrimo(int numero) {
  if (numero <= 1) {
    return false; 
  }

  for (int i = 2; i <= numero/2; i++) {
    if (numero % i == 0) {
      return false; 
    }
  }

  return true;
}

int main() {
  int numero;

  printf("Digite um numero inteiro: ");
  scanf("%d", &numero);

  bool ehPrimoNumero = ehPrimo(numero);

  if (ehPrimoNumero) {
    printf("%d eh um numero primo.\n", numero);
  } else {
    printf("%d nao eh um numero primo.\n", numero);
  }

  return 0;
}

QUESTÃO 4:

#include <stdio.h>

float calcularIMC(float peso, float altura) {
  if (altura <= 0) {
    printf("Altura invalida! Digite uma altura valida.\n");
    return -1; 
  }

  float imc = peso / (altura * altura);
  return imc;
}

char* classificarIMC(float imc) {
  if (imc < 18.5) {
    return "Abaixo do peso";
  } else if (imc >= 18.5 && imc <= 24.9) {
    return "Peso normal";
  } else if (imc >= 25 && imc <= 29.9) {
    return "Sobrepeso";
  } else if (imc >= 30 && imc <= 34.9) {
    return "Obesidade (grau I)";
  } else if (imc >= 35 && imc <= 39.9) {
    return "Obesidade (grau II)";
  } else if (imc >= 40) {
    return "Obesidade morbida (grau III)";
  } else {
    return "Valor de IMC invalido!"; 
  }
}

int main() {
  float peso, altura;

  printf("Digite seu peso em kg: ");
  scanf("%f", &peso);

  printf("Digite sua altura em metros: ");
  scanf("%f", &altura);

  float imc = calcularIMC(peso, altura);

  if (imc != 0) {
    char* classificacao = classificarIMC(imc);
    printf("Seu IMC: %.2f\n", imc);
    printf("Classificacao: %s\n", classificacao);
  }

  return 0;
}

QUESTÃO 05:

#include <stdio.h>
#include <math.h>

int calcularMDC(int num1, int num2) {
  if (num1 == 0 || num2 == 0) {
    return 0; 
  }

  int absNum1 = abs(num1);
  int absNum2 = abs(num2); 

  int resto; 

  while (absNum2 > 0) {
    resto = absNum1 % absNum2; 
    absNum1 = absNum2;
    absNum2 = resto;
  }

  return absNum1; 
}

int main() {
  int num1, num2;

  printf("Digite o primeiro numero: ");
  scanf("%d", &num1);

  printf("Digite o segundo numero: ");
  scanf("%d", &num2);

  int mdc = calcularMDC(num1, num2);
  printf("O MDC de %d e %d e: %d\n", num1, num2, mdc);

  return 0;
}

QUESTÃO 6:

#include <stdio.h>
#include <string.h>

typedef struct Livro {
  char titulo[100];
  char autor[100];
  int anoPublicacao;
} Livro;

Livro encontrarLivroMaisRecente(Livro livros[]) {
  Livro livroMaisRecente = livros[0];

  for (int i = 1; i < 4; i++) {
    if (livros[i].anoPublicacao > livroMaisRecente.anoPublicacao) { 
      livroMaisRecente = livros[i]; 
    }
  }

  return livroMaisRecente;
}

int main() {
  Livro livros[4];

  strcpy(livros[0].titulo, "O Senhor dos Aneis");
  strcpy(livros[0].autor, "J.R.R. Tolkien");
  livros[0].anoPublicacao = 1954;

  strcpy(livros[1].titulo, "O Guia do Mochileiro das Galáxias");
  strcpy(livros[1].autor, "Douglas Adams");
  livros[1].anoPublicacao = 1979;

  strcpy(livros[2].titulo, "Harry Potter e a Pedra Filosofal");
  strcpy(livros[2].autor, "J.K. Rowling");
  livros[2].anoPublicacao = 2003;

  strcpy(livros[3].titulo, "O Hobbit");
  strcpy(livros[3].autor, "J.R.R. Tolkien");
  livros[3].anoPublicacao = 1937;

  Livro livroMaisRecente = encontrarLivroMaisRecente(livros);

  printf("O livro mais recente e:\n");
  printf("Titulo: %s\n", livroMaisRecente.titulo);
  printf("Autor: %s\n", livroMaisRecente.autor);
  printf("Ano de Publicacao: %d\n", livroMaisRecente.anoPublicacao);

  return 0;
}

QUESTÃO 7:

#include <stdio.h>
#include <string.h>

typedef struct Carro {
  char marca[50];
  char modelo[50];
  int anoFabricacao;
} Carro;

int saoMesmoModelo(Carro carro1, Carro carro2) {

  int resultadoComparacao = strcmp(carro1.modelo, carro2.modelo);

  if (resultadoComparacao == 0) {
    return 1;
  } else {
    return 0;
  }
}

int main() {
  Carro carro1, carro2;

  strcpy(carro1.marca, "Toyota");
  strcpy(carro1.modelo, "Corolla");
  carro1.anoFabricacao = 2023;

  strcpy(carro2.marca, "Honda");
  strcpy(carro2.modelo, "Civic");
  carro2.anoFabricacao = 2022;

  int mesmoModelo = saoMesmoModelo(carro1, carro2);

  if (mesmoModelo) {
    printf("Os carros sao do mesmo modelo.\n");
  } else {
    printf("Os carros nao sao do mesmo modelo.\n");
  }

  return 0;
}

QUESTÃO 8:

#include <stdio.h>
#include <stdlib.h> 

typedef struct Node {
  int data;
  struct Node* next;
} Node;

void inserirNoFim(Node** head, int data) {

  Node* novoNo = (Node*) malloc(sizeof(Node));
  novoNo->data = data;
  novoNo->next = NULL;

  if (*head == NULL) {
    *head = novoNo; 
    return;
  }

  Node* current = *head;
  while (current->next != NULL) {
    current = current->next;
  }

  current->next = novoNo;
}

int main() {
  Node* head = NULL;

  inserirNoFim(&head, 10);
  inserirNoFim(&head, 20);
  inserirNoFim(&head, 30);
  inserirNoFim(&head, 40);
  inserirNoFim(&head, 50);
  inserirNoFim(&head, 60);
    

  Node* current = head;
  while (current != NULL) {
    printf("valor da lista %d \n ", current->data);
    current = current->next;
  }
  printf("\n");

  return 0;
}

QUESTÃO 9:

#include <stdio.h>
#include <cstdlib>

typedef struct Elemento {
  int data;
  struct Elemento* next;
} Elemento;

int countElements(Elemento* head) {
  int count = 0; 

  if (head == NULL) {
    return 0;
  }

  Elemento* current = head;
  while (current != NULL) {
    count++; 
    current = current->next; 
  }

  return count; 
}

int main() {
  Elemento* head = NULL;

  Elemento* novoElemento = (Elemento*) malloc(sizeof(Elemento));
  novoElemento->data = 10;
  novoElemento->next = head;
  head = novoElemento;

  novoElemento = (Elemento*) malloc(sizeof(Elemento));
  novoElemento->data = 20;
  novoElemento->next = head;
  head = novoElemento;

  novoElemento = (Elemento*) malloc(sizeof(Elemento));
  novoElemento->data = 30;
  novoElemento->next = head;
  head = novoElemento;
	
  novoElemento = (Elemento*) malloc(sizeof(Elemento));
  novoElemento->data = 40;
  novoElemento->next = head;
  head = novoElemento;
  int numElements = countElements(head);
  
  printf("O numero de elementos na lista e: %d\n", numElements);

  return 0;
}

QUESTÃO 10:

#include <stdio.h>
#include <stdlib.h> 

typedef struct Node {
  int data;
  struct Node* next;
} Node;

void inserirNoFim(Node** head, int data) {
  Node* novoNo = (Node*) malloc(sizeof(Node));
  novoNo->data = data;
  novoNo->next = NULL; 

  if (*head == NULL) {
    *head = novoNo; 
    return;
  }

  Node* current = *head;
  while (current->next != NULL) {
    current = current->next;
  }

  current->next = novoNo;
}

void removerPrimeiro(Node** head) {
  if (*head == NULL) {
    printf("Lista vazia! Nao ha elementos para remover.\n");
    return;
  }

  Node* temp = *head;

  *head = (*head)->next;

  free(temp);

  printf("Primeiro elemento removido com sucesso!\n");
}

void imprimirLista(Node* head) {
  Node* current = head;
  while (current != NULL) {
    printf("%d ", current->data);
    current = current->next;
  }
  printf("\n");
}

int main() {
  Node* head = NULL;

  inserirNoFim(&head, 10);
  inserirNoFim(&head, 20);
  inserirNoFim(&head, 30);

  printf("Lista antes da remocao:\n");
  imprimirLista(head);

  removerPrimeiro(&head);

  printf("\nLista depois da remocao:\n");
  imprimirLista(head);

  return 0;
}
